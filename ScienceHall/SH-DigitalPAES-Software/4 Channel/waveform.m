% ReadLeCroyBinaryWaveform -  read binary waveform file created by a LeCroy Oscilloscope
%     waveform = LeCroyBinaryWaveform(FILENAME) loads the waveform file into the workspace variable W.
%     FILENAME can either be a variable or a string constant enclosed by quotes.
%
%     The return value "waveform" is a record containing four elements:
%     waveform.INFO   Waveform information, in readable formats. For example Oscilloscope ID, sampling time and settings
%     waveform.DESC   Waveform information used for further calculations. For example Sampling rate
%     waveform.Y      Values sampled by the oscilloscope
%     waveform.X      Array of time values corresponding to waveform.Y. Time '0' marks the trigger event
%
%     The routine was tested with files generated by a WavePro7300 and WaveRunner64Xi, Template LECROY_2_3
%
% See also LCPLOT LCPLOTEXT
%
%------------------------------------------------------
% Original version (c)2001 Hochschule fr Technik+Architektur Luzern
% Fachstelle Elektronik
% 6048 Horw, Switzerland
% Slightly modified by Alan Blankman, LeCroy Corporation, 2006
% July 2007; added decoding of TrigTime_array so that sequence mode waveforms decode correctly
% Slightly modified by Randall Gladen, University of Texas at Arlington, 2018

classdef waveform
    
    methods(Static)
        
        function wave=ReadLeCroyBinaryWaveform(fn)
            %%
            %---------------------------------------------------------------------------------------
            % Open File
            %---------------------------------------------------------------------------------------
            
            %numSamples = 1;
            
            %for i=1:numSamples
                
                
                fid=fopen(fn,'r');
                if fid==-1
                    disp (sprintf('ERROR: file not found: %s', fn));
                    return
                end;
                
                %---------------------------------------------------------------------------------------
                % Seek offset in the header block
                %---------------------------------------------------------------------------------------
                data=fread(fid,50);
                WAVEDESC=findstr('WAVEDESC', char(data(1:50)'))-1;
                % subtract 1 because:
                %		- 1st byte in the File = Index [0]
                %		- 1st byte in the Matlab-Array = Index[1]
                
                %---------------------------------------------------------------------------------------
                % Define the addresses of the various informations in the file
                % These addresses are valid for the template LECROY_2_3 and are subject to change in
                % future revisions of the LeCroy firmware. Testing to this template version
                % has been disabled to facilitate decoding of waveforms from scopes
                % utilizing version 2_2 of the template.
                %---------------------------------------------------------------------------------------
                %TESTED_TEMPLATE = 'LECROY_2_3';
                
                %Addresses (WAVEDESC + address as stated in the LECROY template)
                aTEMPLATE_NAME		= WAVEDESC+ 16;
                aCOMM_TYPE			= WAVEDESC+ 32;
                aCOMM_ORDER			= WAVEDESC+ 34;
                aWAVE_DESCRIPTOR	= WAVEDESC+ 36;	% length of the descriptor block
                aUSER_TEXT			= WAVEDESC+ 40;	% length of the usertext block
                aTRIGTIME_ARRAY     = WAVEDESC+ 48;
                aWAVE_ARRAY_1		= WAVEDESC+ 60;	% length (in Byte) of the sample array
                aINSTRUMENT_NAME	= WAVEDESC+ 76;
                aINSTRUMENT_NUMBER  = WAVEDESC+ 92;
                aTRACE_LABEL		= WAVEDESC+ 96;
                aWAVE_ARRAY_COUNT	= WAVEDESC+ 116;
                aVERTICAL_GAIN		= WAVEDESC+ 156;
                aVERTICAL_OFFSET	= WAVEDESC+ 160;
                aNOMINAL_BITS		= WAVEDESC+ 172;
                aHORIZ_INTERVAL     = WAVEDESC+ 176;
                aHORIZ_OFFSET		= WAVEDESC+ 180;
                aVERTUNIT			= WAVEDESC+ 196;
                aHORUNIT			= WAVEDESC+ 244;
                aTRIGGER_TIME		= WAVEDESC+ 296;
                aRECORD_TYPE		= WAVEDESC+ 316;
                aPROCESSING_DONE	= WAVEDESC+ 318;
                aTIMEBASE			= WAVEDESC+ 324;
                aVERT_COUPLING		= WAVEDESC+ 326;
                aPROBE_ATT			= WAVEDESC+ 328;
                aFIXED_VERT_GAIN	= WAVEDESC+ 332;
                aBANDWIDTH_LIMIT	= WAVEDESC+ 334;
                aVERTICAL_VERNIER	= WAVEDESC+ 336;
                aACQ_VERT_OFFSET	= WAVEDESC+ 340;
                aWAVE_SOURCE		= WAVEDESC+ 344;
                
                %---------------------------------------------------------------------------------------
                % determine the number storage format HIFIRST / LOFIRST 	(big endian / little endian)
                %---------------------------------------------------------------------------------------
                
                fseek(fid,aCOMM_ORDER,'bof');
                COMM_ORDER=fread(fid,1,'int16');
                
                fclose(fid);
                % reopen the data file using the correct HIFIRST/LOFIRST format
                if COMM_ORDER==0
                    fid=fopen(fn,'r','ieee-be');		% HIFIRST
                else
                    fid=fopen(fn,'r','ieee-le');		% LOFIRST
                end;
                
                %---------------------------------------------------------------------------------------
                % Get the waveform information
                %---------------------------------------------------------------------------------------
                % Check the template revision  (Commented out to facilitate decoding of 2_2
                % files
                %TEMPLATE_NAME		= ReadString(fid, aTEMPLATE_NAME);
                %if ~strcmp( deblank(TEMPLATE_NAME), TESTED_TEMPLATE)
                %   disp (sprintf ('WARNING!\n %s %s %s\n %s %s %s',...
                %			'This function has been written for the LeCroy-Template',...
                %			TESTED_TEMPLATE, '.',...
                %			'The current file contains information created with the template',...
                %			TEMPLATE_NAME, '.'));
                %end
                
                % Instrument
                wave.info.INSTRUMENT_NAME	= waveform.ReadString(fid, aINSTRUMENT_NAME);
                wave.info.INSTRUMENT_NUMBER	= waveform.ReadLong	(fid, aINSTRUMENT_NUMBER);
                wave.info.Filename			= fn;
                
                % Channel
                wave.info.TRIGGER_TIME		= waveform.ReadTimestamp(fid, aTRIGGER_TIME);
                
                tmp=['channel 1';'channel 2';'channel 3';'channel 4';'unknown  '];
                wave.info.WAVE_SOURCE			= tmp (1+ waveform.ReadWord(fid, aWAVE_SOURCE),:);
                
                tmp=['DC_50_Ohms'; 'ground    ';'DC 1MOhm  ';'ground    ';'AC 1MOhm  '];
                wave.info.VERT_COUPLING		= deblank (tmp (1+ waveform.ReadWord(fid, aVERT_COUPLING),:));
                
                tmp=['off'; 'on '];
                wave.info.BANDWIDTH_LIMIT	= deblank (tmp (1+ waveform.ReadWord(fid, aBANDWIDTH_LIMIT),:));
                
                tmp=[
                    'single_sweep      ';	'interleaved       '; 'histogram         ';
                    'graph             ';	'filter_coefficient'; 'complex           ';
                    'extrema           ';	'sequence_obsolete '; 'centered_RIS      ';
                    'peak_detect       '];
                wave.info.RECORD_TYPE		= deblank (tmp (1+ waveform.ReadWord(fid, aRECORD_TYPE),:));
                
                tmp=[
                    'no_processing';   'fir_filter   '; 'interpolated ';   'sparsed      ';
                    'autoscaled   ';   'no_result    '; 'rolling      ';   'cumulative   '];
                wave.info.PROCESSING_DONE		= deblank (tmp (1+ waveform.ReadWord(fid, aPROCESSING_DONE),:));
                
                
                % Vertical settings
                FIXED_VERT_GAIN			= waveform.ReadFixed_vert_gain(fid, aFIXED_VERT_GAIN);
                PROBE_ATT				= waveform.ReadFloat (fid, aPROBE_ATT);
                VERTICAL_GAIN			= waveform.ReadFloat	(fid, aVERTICAL_GAIN);
                VERTICAL_OFFSET			= waveform.ReadFloat	(fid, aVERTICAL_OFFSET);
                wave.info.NOMINAL_BITS	= waveform.ReadWord	(fid, aNOMINAL_BITS);
                wave.info.Gain_with_Probe = strcat (waveform.Float_to_Eng(FIXED_VERT_GAIN*PROBE_ATT), 'V/div');
                wave.info.vDiv          = FIXED_VERT_GAIN*PROBE_ATT;
                
                % Horizontal settings
                HORIZ_INTERVAL			= waveform.ReadFloat(fid, aHORIZ_INTERVAL);
                HORIZ_OFFSET			= waveform.ReadDouble(fid, aHORIZ_OFFSET);
                wave.info.OFFSET        = waveform.ReadDouble(fid, aHORIZ_OFFSET);
                wave.info.TIMEBASE      = waveform.ReadTimebase(fid,aTIMEBASE);
                wave.info.SampleRate	= strcat (waveform.Float_to_Eng(1/HORIZ_INTERVAL) , 'S/sec');
                wave.desc.Ts			= HORIZ_INTERVAL;
                wave.desc.fs			= 1/HORIZ_INTERVAL;
                
                %---------------------------------------------------------------------------------------
                % Read samples array (Plain binary ADC values)
                %---------------------------------------------------------------------------------------
                COMM_TYPE			= waveform.ReadWord(fid, aCOMM_TYPE);
                WAVE_DESCRIPTOR 	= waveform.ReadLong(fid, aWAVE_DESCRIPTOR);
                USER_TEXT			= waveform.ReadLong(fid, aUSER_TEXT);
                WAVE_ARRAY_1		= waveform.ReadLong(fid, aWAVE_ARRAY_1);
                WAVE_ARRAY_COUNT    = waveform.ReadLong(fid, aWAVE_ARRAY_COUNT);
                TRIGTIME_ARRAY      = waveform.ReadLong(fid, aTRIGTIME_ARRAY);
                
                %WAVE_ARRAY_1
                
                fseek(fid, WAVEDESC + WAVE_DESCRIPTOR + USER_TEXT + TRIGTIME_ARRAY, 'bof');
                if COMM_TYPE == 0  % byte
                    wave.y=fread(fid,WAVE_ARRAY_1, 'int8');
                else	%	word
                    wave.y=fread(fid,WAVE_ARRAY_1, 'int16');
                    assignin('base','wave',wave.y);
                    %fseek(fid, WAVEDESC + WAVE_DESCRIPTOR + USER_TEXT + TRIGTIME_ARRAY, 'bof');
                    %wave.bits = fread(fid, WAVE_ARRAY_1, '*ubit1', 'ieee-be');
                    %wave.bits=fread(fid,WAVE_ARRAY_1, 'int16');
                    %assignin('base','waveBits',wave.bits);
                end;
                
                %---------------------------------------------------------------------------------------
                % Transform the ADC values to voltages and create corresponding array of time
                %---------------------------------------------------------------------------------------
                wave.y = VERTICAL_GAIN * wave.y - VERTICAL_OFFSET;
                wave.x = (0:WAVE_ARRAY_COUNT-1)'*HORIZ_INTERVAL + HORIZ_OFFSET;
                
                %---------------------------------------------------------------------------------------
                % close the waveform file
                %---------------------------------------------------------------------------------------
                fclose(fid);
                
                %---------------------------------------------------------------------------------------
                % Triple Coincidence Analysis
                %---------------------------------------------------------------------------------------    
          
        end
    end
        %=======================================================================================
        % Support functions
        %=======================================================================================
        
        %---------------------------------------------------------------------------------------
        % Read 8Bit signed Byte (not used)
        %---------------------------------------------------------------------------------------
        methods(Static)
        function b=ReadByte(fid, Addr)
            fseek(fid,Addr,'bof');
            b=fread(fid,1,'int8');
        end
        end
        
        
        %---------------------------------------------------------------------------------------
        % Read 16Bit signed Word
        %---------------------------------------------------------------------------------------
         methods(Static)
        function w=ReadWord(fid, Addr)
            fseek(fid,Addr,'bof');
            w=fread(fid,1,'int16');
        end
         end
        
        %---------------------------------------------------------------------------------------
        % Read 32Bit signed Long
        %---------------------------------------------------------------------------------------
         methods(Static)
        function l=ReadLong(fid, Addr)
            fseek(fid,Addr,'bof');
            l=fread(fid,1,'int32');
        end
         end
        
        %---------------------------------------------------------------------------------------
        % Read 32Bit IEEE Float
        %---------------------------------------------------------------------------------------
         methods(Static)
        function f=ReadFloat(fid, Addr)
            fseek(fid,Addr,'bof');
            f=fread(fid,1,'float32');
        end
         end
        
        %---------------------------------------------------------------------------------------
        % Read 64Bit IEEE Double
        %---------------------------------------------------------------------------------------
         methods(Static)
        function d=ReadDouble(fid, Addr)
            fseek(fid,Addr,'bof');
            d=fread(fid,1,'float64');
        end
         end
        
        %---------------------------------------------------------------------------------------
        % Read string (up to 16 characters)
        %---------------------------------------------------------------------------------------
         methods(Static)
        function s=ReadString(fid, Addr)
            fseek(fid,Addr,'bof');
            s=fgets(fid,16);
        end
         end
        
        %---------------------------------------------------------------------------------------
        % Read timestamp
        %---------------------------------------------------------------------------------------
         methods(Static)
        function t=ReadTimestamp(fid, Addr)
            fseek(fid,Addr,'bof');
            seconds	= fread(fid,1,'float64');
            minutes	= fread(fid,1,'int8');
            hours		= fread(fid,1,'int8');
            days		= fread(fid,1,'int8');
            months	= fread(fid,1,'int8');
            year		= fread(fid,1,'int16');
            
            t=sprintf('%i.%i.%i, %i:%i:%2.0f', days, months, year, hours, minutes, seconds);
        end
         end
        
        %---------------------------------------------------------------------------------------
        % Timebase aus dem File lesen
        %---------------------------------------------------------------------------------------
         methods(Static)
        function t=ReadTimebase(fid, Addr)
            fseek(fid,Addr,'bof');
            e=fread(fid,1,'int16');
            
            tmp=[1 2 5];
            mant = tmp( 1+ mod(e,3));
            ex  = floor (e / 3)-12;
            
            t=mant*10^ex;
        end
         end
        %---------------------------------------------------------------------------------------
        % fixed Vertical Gain aus dem File lesen
        %---------------------------------------------------------------------------------------
         methods(Static)
        function t=ReadFixed_vert_gain(fid, Addr)
            fseek(fid,Addr,'bof');
            e=fread(fid,1,'int16');
            
            tmp=[1 2 5];
            mant = tmp( 1+ mod(e,3));
            ex  = floor (e / 3)-6;
            
            t= mant*10^ex;
        end
         end
        %---------------------------------------------------------------------------------------
        % Transform a Float to the Engineering-Format (returns a string)
        %---------------------------------------------------------------------------------------
         methods(Static)
        function s=Float_to_Eng (f)
            ex= floor(log10(f));
            exeng=ex-mod(ex,3);
            if exeng<-18; exeng=-18; end
            if exeng>18; exeng=18; end;
            mant=f/10^exeng;
            
            prefix=('afpnum kMGPE');	%prefixes (u=micro, m=milli, k=kilo, ...)
            s=sprintf('%g%s',mant, prefix( (exeng+18)/3 +1));
        end
         end
        
        end
       
        

